---
title: "brazil_land_scape"
format: html
editor: source
---

## Load packages

```{r}
#| message: false
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, here, janitor, lubridate, RPostgres, DBI, parsedate, stringr, hms, uuid, oce)

```

## Connect to Database

```{r}
tryCatch({
    drv <- dbDriver("Postgres")
    print("Connecting to Databaseâ€¦")
    connection <- dbConnect(drv,
                 dbname = Sys.getenv("aws_dbname"),
                 host = Sys.getenv("aws_host"),
                 port = Sys.getenv("aws_port"),
                 user = Sys.getenv("aws_user"),
                 password = Sys.getenv("aws_password"),
                 timezone=NULL)
    print("Database Connected!")
    },
    error=function(cond) {
            print("Unable to connect to Database.")
    })

dbExecute(connection, "set search_path to survey_data")

```

## Load Data

```{r}
#| message: false

raw_land_scape <- read_csv(here("data", "new_2023_data", "land_scape", "Landscapes_RoL_Becker.csv")) %>% 
  clean_names()

```

## Select BD data

```{r}

land_scape_bd <- raw_land_scape %>% 
  select(c(plate:bd_pres_ab)) %>% 
  rename(bd_swab_id = sample_id)

#dbWriteTable(connection, "brazil_landscape_bd", land_scape_bd, overwruite = T)

```

## Select microbiome data

```{r}

land_scape_microbiome <- raw_land_scape %>% 
  select(c(sample_id_2:jaccard_microbiome_beta_dispersion)) %>% 
  rename(microbiome_swab_id = sample_id_2) %>% 
  select(!c(description))

#dbWriteTable(connection, "brazil_landscape_microbiome", land_scape_microbiome, overwrite = T)

```

## Survey Data

### Site table

#### clean

```{r}

land_scape_site <- raw_land_scape %>% 
  select(landscape_id, fragment_id, latitude, longitude, notes_about_capture_site) %>% 
  rename(site_comments = notes_about_capture_site) %>% 
  unite(site, c("landscape_id", "fragment_id"), sep = "_", na.rm = T) %>% 
  group_by(site) %>%
  mutate(temp_id = cur_group_id()) %>% 
  filter(!duplicated(temp_id)) %>% 
  select(!c(temp_id)) %>% 
  mutate(site = str_to_lower(site),
         site = str_replace_all(site, ". ", "_"),
         site_id = UUIDgenerate(output = c("uuid")),
         utm_zone = 23,
         region = "santa_virginia") %>% 
  ungroup() %>% 
  mutate(latitude = as.character(latitude),
         longitude = as.character(longitude))

land_scape_site$latitude <- gsub("^(.{3})(.*)$",
                                 "\\1.\\2",
                                 land_scape_site$latitude)

land_scape_site$longitude <- gsub("^(.{3})(.*)$",
                                 "\\1.\\2",
                                 land_scape_site$longitude)

land_scape_site$latitude <- as.numeric(land_scape_site$latitude)
land_scape_site$longitude <- as.numeric(land_scape_site$longitude)

v <- terra::vect(land_scape_site, c("longitude", "latitude"), crs="+proj=longlat")
u <- terra::project(v, "+proj=utm +zone=23")
utm <- terra::crds(u)

i <- which(!is.na(land_scape_site$longitude))
land_scape_site[i, c("utme", "utmn")] <- utm

land_scape_site <- land_scape_site %>% 
  select(!c(latitude, longitude))



```

#### apply region_key

```{r}

region_id <- dbGetQuery(connection, "select r.region, r.region_id from region r;")

final_land_scape_site <-land_scape_site %>% 
  left_join(region_id, by = c("region")) 

#dbAppendTable(connection, "site", final_land_scape_site)


```

### Visit Table

#### clean visit table

```{r}

land_scape_visit <- raw_land_scape %>% 
  select(landscape_id, fragment_id, date_portuguese, campanha) %>% 
  unite(site, c("landscape_id", "fragment_id"), sep = "_", na.rm = T) %>% 
  mutate(date_portuguese = lubridate::parse_date_time(date_portuguese, c("%m/%d/%y")),
         site = str_to_lower(str_replace_all(site, ". ", "_")),
         survey_time = "night" ) %>% 
  rename(date = date_portuguese,
         campaign = campanha) %>% 
  group_by(date, survey_time, site) %>% 
  mutate(temp_id = cur_group_id()) %>% 
  filter(!duplicated(temp_id)) %>% 
  select(!temp_id) %>% 
  drop_na(date) %>% 
  mutate(visit_id = UUIDgenerate(output = c("uuid")))

```

#### join site key on visit table

```{r}

site_key <- final_land_scape_site %>% 
  select(site, site_id)

final_land_scape_visit <- land_scape_visit %>% 
  left_join(site_key, by = c("site")) 

#dbAppendTable(connection, "final_land_scape_visit", visit)


```

### Survey Table

#### clean survey table

```{r}

land_scape_survey <- raw_land_scape %>% 
  select(landscape_id, fragment_id, date_portuguese, percent_cob_veg) %>% 
  unite(site, c("landscape_id", "fragment_id"), sep = "_", na.rm = T) %>% 
  mutate(date_portuguese = lubridate::parse_date_time(date_portuguese, c("%m/%d/%y")),
         detection_type = "capture",
         survey_time = "night") %>% 
  rename(date = date_portuguese,
         percent_vegetation_cover = percent_cob_veg) %>% 
  group_by(site, date) %>% 
  mutate(temp_id = cur_group_id()) %>% 
  filter(!duplicated(temp_id)) %>% 
  select(!c(temp_id)) %>% 
  mutate(survey_id = UUIDgenerate(output = c("uuid")),
         site = str_to_lower(str_replace_all(site, ". ", "_"))) %>% 
  drop_na(date)

```

#### add visit_key to survey table

```{r}
visit_key <- final_land_scape_visit %>% 
  select(site, date, survey_time, visit_id)

final_land_scape_survey <- land_scape_survey %>% 
  left_join(visit_key, by = c("site", "date", "survey_time")) %>% 
  ungroup() 

#dbAppendTable(connection, "final_land_scape_survey", survey)


```

### Capture table

#### Clean capture data

```{r}

land_scape_capture <- raw_land_scape %>% 
  select(date_portuguese, sp, developmental_mode, sample_id, landscape_id, fragment_id, sex, obs) %>% 
  unite(site, c("landscape_id", "fragment_id"), sep = "_", na.rm = T) %>% 
  mutate(detection_type = "capture",
         survey_time = "night",
         site = str_to_lower(str_replace_all(site, ". ", "_")),
         date_portuguese = lubridate::parse_date_time(date_portuguese, c("%m/%d/%y")),
         microbiome_id = sample_id,
         date_portuguese = if_else(is.na(date_portuguese), as_date("2019-01-14"), date_portuguese)) %>% 
  rename(date = date_portuguese,
         bd_swab_id = sample_id,
         species_capture = sp,
         capture_comments = obs,
         life_stage = developmental_mode) %>% 
  mutate(capture_id = UUIDgenerate(output = c("uuid"), n = n()),
         species_capture = str_to_lower(str_replace_all(species_capture, " ", "_")),
         life_stage = if_else(life_stage == "AL", "aquatic_larvae", "terrestrial_development"),
         species_capture = if_else(species_capture == "ischnocnema_henselli", "ischnocnema_henselii", species_capture))

```

#### survey fkey for capture table

```{r}
surv_fkey <- final_land_scape_survey %>% 
  select(site, date, detection_type, survey_time, survey_id)

final_land_scape_capture <- land_scape_capture %>% 
  left_join(surv_fkey, by = c("site", "date", "detection_type", "survey_time"))


```

## Select habit density table

```{r}

land_scape_habitat <- raw_land_scape %>% 
  select(landscape_id, fragment_id, c(den_dre:ennd_app)) %>% 
  unite(site, c("landscape_id", "fragment_id"), sep = "_", na.rm = T) %>% 
  group_by(site) %>%
  mutate(temp_id = cur_group_id()) %>% 
  filter(!duplicated(temp_id)) %>% 
  select(!c(temp_id)) %>% 
  mutate(site = str_to_lower(site),
         site = str_replace_all(site, ". ", "_"))
  

```

## Drop columns and Append

```{r}
# site
append_site <- final_land_scape_site %>% 
  select(!c(region)) 

dbAppendTable(connection, "site", append_site)

# visit
append_visit <- final_land_scape_visit %>% 
  ungroup() %>% 
  select(!c(site)) 

dbAppendTable(connection, "visit", append_visit)

# survey
append_survey <- final_land_scape_survey %>% 
  ungroup() %>% 
  select(!c(survey_time, date, site)) %>% 
  mutate(percent_vegetation_cover = as.integer(percent_vegetation_cover))

dbAppendTable(connection, "survey", append_survey)  

# capture
append_capture <- final_land_scape_capture %>% 
  ungroup() %>% 
  select(!c(site, date, survey_time, detection_type)) %>% 
  rename(microbiome_swab_id = microbiome_id)

dbAppendTable(connection, "capture", append_capture)

#bd
dbWriteTable(connection, "brazil_landscape_bd", land_scape_bd, overwrite = T)

#microbiome
dbWriteTable(connection, "brazil_landscape_microbiome", land_scape_microbiome, overwrite= T)

#fragment data
dbWriteTable(connection, "brazil_landscape_habitat", land_scape_habitat, overwrite = T) 


```
